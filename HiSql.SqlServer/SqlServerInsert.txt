using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace HiSql
{
    /// <summary>
    /// SqlServer 数据库底层处理实现
    /// Author:tgm
    /// email:tansar@126.com
    /// </summary>

    public class SqlServerInsert: SqlServerDM, IInsert 
    {

        /// <summary>
        /// 数据包大小 经过测试200这个值是比较合理
        /// </summary>
        //int _bluksize = 200;

        StringBuilder _Sql = new StringBuilder();

        public SqlServerInsert():base()
        {
            
        }



        TabInfo getTabCache(string tabname)
        {
            TabInfo tabinfo;
            Dictionary<string, string> _dic = Tool.RegexGrp(Constants.REG_TABNAME, tabname);
            if (_dic["flag"].ToString() != "")
            {
                //获取本地当前连接缓存
                tabinfo = this.Context.MCache.GetCache<TabInfo>(tabname);
            }
            else
                tabinfo = GetTabStruct(tabname);
            return tabinfo;
        }


        #region 数据插入接口实现


        /// <summary>
        /// 批量的数据插入
        /// </summary>
        /// <param name="tabname"></param>
        /// <param name="lstobj">
        /// 这是一个匿名实体或实体的列表集合
        /// 如 new List<object>{new {UserName="tansar",Age=33}}
        /// 
        /// </param>
        /// <returns></returns>
        public IInsert Insert(string tabname, List<object> lstobj)
        {
           
            if (lstobj == null && lstobj.Count == 0)
            {
                return this;   
            }

            TabInfo tabinfo= getTabCache(tabname);
            


            Type type = lstobj[0].GetType();
            StringBuilder sb_sql = new StringBuilder();
            List<PropertyInfo> attrs = type.GetProperties().Where(p => p.MemberType == MemberTypes.Property && p.CanRead == true).ToList();


            int page = lstobj.Count <= this.BlukSize ? 1 : lstobj.Count % this.BlukSize == 0?lstobj.Count/ this.BlukSize : lstobj.Count/ this.BlukSize + 1;

            //分数据包 包的大小决定了数据插入的性能问题
            //insert values 的方式 包大小最高不能超过1000
            for (int p = 0; p < page; p++)
            {
                for (int i = p * this.BlukSize; i < (p + 1) * this.BlukSize; i++)
                {
                    if (i >= lstobj.Count)
                    {
                        break;
                    }
                    else
                    {
                        Dictionary<string, string> _values = CheckInsertData(attrs, tabinfo.GetColumns, lstobj[i]);
                        string _sql = BuildInsertSql(_values, i > p * this.BlukSize).Replace("[$TabName$]", tabname);//i > p * _bluksize
                        sb_sql.AppendLine(_sql);
                    }
                }
                
            }
            //将多个包合并成一个SQL文档 执行
            //
            string sql = sb_sql.ToString();
            _Sql .AppendLine( sql);
            sb_sql = new StringBuilder();
            return this;
        }
        /// <summary>
        /// 返回生成的SQL
        /// </summary>
        /// <returns></returns>
        public string ToSql()
        {
            return _Sql.ToString();
        }
        /// <summary>
        /// 执行SQL语句
        /// </summary>
        /// <returns></returns>
        public int ExecCommand()
        {
            int i = 0;
            if (!string.IsNullOrEmpty(_Sql.ToString()))
            {
                if(this.Context.CurrentConnectionConfig.DbType==DBType.SqlServer)
                    _Sql.AppendLine("select @@identity;");

                i = this.Context.DBO.ExecCommand(_Sql.ToString());
                _Sql = new StringBuilder ();
                return i;
            }
            else
                return i;
        }

        /// <summary>
        /// 向指定表插入单数据
        /// </summary>
        /// <param name="tabname"></param>
        /// <param name="objdata">
        /// 该参数可以是一个实体类，也可以是一个匿名类
        /// new {UserName="tansar",Age=33}
        /// </param>
        /// <returns></returns>
        public IInsert Insert(string tabname, object objdata)
        {
            if (objdata == null)
                return this;

            TabInfo tabinfo = getTabCache(tabname);
            Type type = objdata.GetType();
            Dictionary<string, string> _values = new Dictionary<string, string>();
            List < PropertyInfo > attrs = type.GetProperties().Where(p => p.MemberType == MemberTypes.Property && p.CanRead == true).ToList();
            _values = CheckInsertData(attrs, tabinfo.GetColumns, objdata);
            if (_values.Count > 0)
            {
                string _sql = BuildInsertSql(_values).Replace("[$TabName$]", tabname);
                _Sql .AppendLine(_sql);
            }
            else
            {
                throw new Exception($"向表[{tabname}]无可插入数据");
            }
            return this;
        }
        #endregion
    }
}
